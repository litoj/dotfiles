#!/usr/bin/bash
#Signal managing script for statusbar

wp() {
	local arg=$1
	declare -A nodes def
	[[ $arg == detect ]] && sleep 1
	while :; do
		{
			while read -r line; do
				[[ $line == '├─ Sinks:' ]] && break
			done
			category=sink
			while read -r line; do
				if [[ ${line:3} =~ ^(\*)?\ +([0-9]+)\.\ ([^ ]+(\ [^ ]+)*) ]]; then
					if [[ $category == filter ]]; then
						type=${BASH_REMATCH[3]##*-}
						BASH_REMATCH[3]="Echo ${type^}"
					else
						type=$category
					fi
					nodes["${BASH_REMATCH[3]}"]="${BASH_REMATCH[2]};$type"
					if [[ ${BASH_REMATCH[1]} == \* ]]; then
						def[$type]=${BASH_REMATCH[3]}
					fi
				elif [[ ${line:3} =~ ^([A-Z][a-z]+)s ]]; then
					[[ $BASH_REMATCH == Streams ]] && break
					category=${BASH_REMATCH[1],}
				fi
			done
		} < <(wpctl status)
		[[ ${def[@]} ]] || ((++tries > 5)) && break || sleep 1
	done
	unset nodes['Echo Capture'] nodes['Echo Playback']

	if [[ $arg != detect ]]; then
		if [[ $arg ]]; then
			glob=$arg
		else
			glob=${def[sink]:-${def[source]}}
			glob=$(printf '%s\n' "${!nodes[@]}" | rofi -dmenu -i -p "Audio (${glob%% *})")
		fi
		if [[ $glob ]]; then
			[[ $glob == *\* ]] || glob="${glob%% *}*"

			for k in "${!nodes[@]}"; do
				[[ $k == $glob ]] && def[${nodes["$k"]#*;}]=$k
			done
		fi
	fi
	msg="Sink: ${def[sink]:=Echo Sink}\nSource: ${def[source]:=Echo Source}"

	if ! [[ ${nodes[${def[sink]}]} && ${nodes[${def[source]}]} ]]; then
		notify-send -u critical -t 2000 'Audio Err' "$msg"
		exit 1
	fi

	notify-send -t 1500 "Audio ${glob:-Default}" "$msg"
	wpctl set-default ${nodes[${def[sink]}]%;*}
	wpctl set-default ${nodes[${def[source]}]%;*}
	[[ ${def[sink]} == Echo* ]] && def[sink]='Builtin Sink'
	[[ ${def[source]} == Echo* ]] && def[source]='Builtin Source'
	echo "${nodes[${def[sink]}]%;*} ${nodes[${def[source]}]%;*}" >/tmp/my/wp
	pkill -RTMIN+10 i3blocks && pkill -RTMIN+11 i3blocks
}

cpu() {
	[[ -f /bin/cpupower-gui ]] || return
	# from ../cpupower_gui/
	local profile=$1 state
	declare -A urgency=([Auto]=low [Schedutil]=critical)
	cpupower-gui pr $profile &>/dev/null &&
		notify-send -t 1000 -h string:synchronous:battery -u ${urgency[$profile]:-normal} " $profile"
}

cpuByBattery() {
	local profile
	if ((!$#)); then
		read profile </sys/class/power_supply/BAT0/status
	else
		(($1)) && profile=Charging || profile=Discharging
	fi
	if [[ $profile != D* ]]; then
		profile=Auto
		pkill -f 'bash hibernateDelayed.sh'
	else
		profile=Powersave
	fi
	cpu "$profile"

	sleep 1 && pkill -RTMIN+14 i3blocks # update battery status
}

load() {
	killall acpi_listen
	cpuByBattery
	wp detect

	local old
	readarray -t old < <(pgrep -f signal)
	((${#old[@]} > 1)) && kill -9 "${old[*]/$$/}"
	unset old

	[[ -f /bin/acpi_listen ]] || exit

	while read -r line; do
		case "$line" in
			jack/head*) pkill -RTMIN+10 i3blocks ;;
			jack/micro*) pkill -RTMIN+11 i3blocks ;;
			# plugging in emmits the *1 event twice
			ac_adapter*) [[ ${line:0-1} == 0 ]] || read -r line && cpuByBattery ${line:0-1} ;;
			button/lid*open) sleep 1 && cpuByBattery ;;
		esac
	done < <(acpi_listen)
}

case "$1" in
	vol)
		read -ra WP </tmp/my/wp
		if [[ $2 == toggle ]]; then
			wpctl set-mute ${WP[0]} "$2"
		else
			wpctl set-volume ${WP[0]} "$2"
		fi
		pkill -RTMIN+10 i3blocks
		;;
	mic)
		read -ra WP </tmp/my/wp
		if [[ $2 == toggle ]]; then
			wpctl set-mute ${WP[1]} "$2"
		else
			wpctl set-volume ${WP[1]} "$2"
		fi
		pkill -RTMIN+11 i3blocks
		;;
	light)
		light=$(backlight "$2" "$3")
		notify-send -a signal -h int:value:$light -h string:synchronous:light " $light%"
		pkill -RTMIN+12 i3blocks
		;;
	kb)
		swaymsg -t get_inputs -p | grep -q \(US\) -m 1 && kb=cz || kb=us
		swaymsg input type:keyboard xkb_switch_layout next
		notify-send -a signal -h string:synchronous:kb " $kb"
		pkill -RTMIN+13 i3blocks
		;;
	theme) ~/.config/i3blocks/clock $2 ;;
	*) "$@" ;;
esac
