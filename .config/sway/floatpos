#!/usr/bin/bash
#sway/floatpos - sway floating mode tiling functionality improved over Windows

p2="$2"
[[ $p2 == snap || $p2 == shift ]] && p2=focusable
## very fast data filter (way faster than jq)
W=$(swaymsg -t get_workspaces -p | sed -n 's/^Workspace \(.*\) (focused)/\1/p')
BOTH=$(swaymsg -t get_tree | grep -F -e "\"name\": \"${W/\//\\/}\"" -B 23 -e '"focused": true' -A 8)
WIN=($(echo "$BOTH" | tail -n 20 | grep -F -e '"type' -e '"x' -e '"y' \
	-e '"width' -e '"height' | sed 's/.*: \([^,]\+\).*/\1/')) # ("con" [x] [y] [w] [h])
if [[ ${WIN[0]} == \"con\" ]]; then
	if [[ $p2 == focusable ]]; then
		case "$1" in
			up | u) swaymsg focus up ;;
			down | d) swaymsg focus down ;;
			left | l) swaymsg focus left ;;
			right | r) swaymsg focus right ;;
		esac
	else
		case "$1" in
			up | u) swaymsg move up ;;
			down | d) swaymsg move down ;;
			left | l) swaymsg move left ;;
			right | r) swaymsg move right ;;
			center | c) swaymsg split h,layout tabbed ;;
		esac
	fi
	exit 0
fi

declare -ai dim=($(echo "$BOTH" | head -n 4 | sed 's/.*: \([^,]\+\).*/\1/')) # ([x] [y] [w] [h])

declare -i Y=${dim[1]} G=${dim[0]} # Gap size
dim[0]=${dim[2]}
dim[1]=${dim[3]}
((dim[2] = (dim[0] - G + 1) / 2)) # upper half
((dim[3] = (dim[1] - G + 1) / 2)) # lower half
declare -ai win=($((WIN[1] - G)) $((WIN[2] - Y)) "${WIN[3]}" "${WIN[4]}")
((win[0] < 0)) && win[0]=0
((win[1] < 0)) && win[1]=0

#Setts window to quarter of the screen and centers it
defsize() {
	swaymsg resize set ${dim[2]} ${dim[3]}, move position center
}

up() {
	if [[ $p2 == focusable ]]; then
		swaymsg move position ${win[0]} 0
	elif ((win[1] <= 0)); then
		if ((win[3] > dim[3])); then
			swaymsg resize shrink down $((win[3] - dim[3]))
		else
			swaymsg resize set $((dim[0] + G * 2)) $((dim[1] + G * 2)), move position 0 0, move left $G, move up $G
		fi
	elif ((win[1] + win[3] >= dim[1])); then
		if ((win[2] > dim[0] * 5 / 7)); then
			defsize
		elif ((win[3] <= dim[1] * 3 / 5)); then
			swaymsg resize grow up $((dim[1] - win[3]))
		else
			swaymsg resize set height ${dim[3]}, move position ${win[0]} 0
		fi
	else
		swaymsg move position ${win[0]} 0
	fi
}

down() {
	if [[ $p2 == focusable ]]; then
		swaymsg move position ${win[0]} $((dim[1] - win[3]))
	elif ((win[1] <= 0)); then
		if ((win[2] > dim[0] * 5 / 7)); then
			defsize
		elif ((win[3] == dim[1])); then
			swaymsg resize set height ${dim[3]}, move position ${win[0]} $(((dim[1] + G) / 2))
		else
			swaymsg resize grow down $((dim[1] - win[3]))
		fi
	elif ((win[1] + win[3] >= dim[1])); then
		if ((win[2] >= dim[0])); then
			swaymsg move position 0 0
		else
			swaymsg resize set ${dim[0]} ${dim[3]}, move position 0 $(((dim[1] + G) / 2))
		fi
	else
		swaymsg move position ${win[0]} $((dim[1] - win[3]))
	fi
}

left() {
	if [[ $p2 == focusable ]]; then
		swaymsg move position 0 ${win[1]}
	elif ((win[0] == 0 && win[2] <= dim[0] * 5 / 7)); then
		swaymsg move position $((dim[0] - win[2])) ${win[1]}
	elif ((win[0] > dim[0] * 3 / 7)); then
		swaymsg resize grow left ${win[0]}
	else
		swaymsg resize set ${dim[2]} ${dim[1]}, move position 0 0
	fi
}

right() {
	if [[ $p2 == focusable ]]; then
		swaymsg move position $((dim[0] - win[2])) ${win[1]}
	elif ((win[0] + win[2] == dim[0] && win[2] <= dim[0] * 5 / 7)); then
		swaymsg move position 0 ${win[1]}
	elif ((win[0] + win[2] <= dim[0] * 4 / 7)); then
		swaymsg resize grow right $((dim[0] - win[2] - win[0]))
	else
		swaymsg resize set ${dim[2]} ${dim[1]}, move position $(((dim[0] + G) / 2)) 0
	fi
}

case "$1" in
	up | u) up ;;
	down | d) down ;;
	left | l) left ;;
	right | r) right ;;
	center | c) swaymsg move position center ;;
esac
#for usage in tiling mode
