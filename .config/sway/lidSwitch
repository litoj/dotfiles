#!/usr/bin/bash

NO_SLEEP=/tmp/my/nolidsleep
LOW_HZ=/tmp/my/lowhz

cmd=$1

checkLowHZ() {
	if swaymsg -t get_outputs -p | grep @48; then
		[[ -f $LOW_HZ ]] && swaymsg 'output eDP-1 mode 2560x1600@120Hz' &&
			sleep 0.25 && swaymsg 'output eDP-1 mode 2560x1600@48Hz'
	fi
}

main() {
	if [[ $cmd == closed && ! -f $NO_SLEEP || $cmd == sleep ]]; then
		swaymsg 'output eDP-1 power off'
		systemctl suspend
		if sleep 1 && [[ $(cat /proc/acpi/button/lid/LID/state) == *" closed" ]]; then
			"$0" closed &
			exit
		else
			cmd=resume
		fi
	fi

	case "$cmd" in
		mode)
			state=($(swaymsg -t get_outputs -p |
				awk '/Current/ {res=$3; print $3}; $1 == res {print int($3)}'))
			res=${state[0]}
			declare -A refRate
			for hz in "${state[@]:1}"; do
				refRate["$hz"]=$hz
			done

			mode=$2
			if [[ -z $mode ]]; then
				if [[ -f $LOW_HZ ]]; then
					mode=96
				elif ! swaymsg -t get_outputs -p | grep 'Current.*@ 120'; then
					mode=120
				else
					mode=${refRate['48']:-${refRate['60']}}
				fi
			fi
			mode=${refRate["$mode"]:-60}

			((mode == 48)) && touch "$LOW_HZ" || rm "$LOW_HZ"

			swaymsg "output eDP-1 mode ${res}@${mode}Hz"
			notify-send "Hz" "$mode" -t 1000 -u low \
				-h int:value:$((mode * 5 / 6)) -h string:synchronous:hz
			;;
		closed) swaymsg 'output $d1 power off' ;;
		open)
			swaymsg 'output $d1 power on'
			checkLowHZ
			;;
		resume)
			swaymsg 'output * power on'
			checkLowHZ
			;;
		idle) swaymsg 'output * power off' ;;
		toggle)
			if [[ -f $NO_SLEEP ]]; then
				rm "$NO_SLEEP"
				notify-send LidSleep -t 1000 -u low
			else
				touch "$NO_SLEEP"
				notify-send NoLidSleep -t 1000 -u critical
			fi
			;;
	esac
}

main "$@" &>/dev/null
