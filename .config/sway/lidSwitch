#!/usr/bin/bash

NO_SLEEP=/tmp/my/nolidsleep

cmd=$1

main() {
	if [[ $cmd == closed && ! -f $NO_SLEEP || $cmd == sleep ]]; then
		swaymsg 'output eDP-1 power off'
		systemctl suspend
		if sleep 1 && [[ $(</proc/acpi/button/lid/LID/state) == *" closed" ]]; then
			"$0" closed &
			exit
		else
			cmd=resume
		fi
	fi

	case "$cmd" in
		mode)
			state=($(
				swaymsg -t get_outputs -p |
					awk '/Current/ {res=$3; current=$5};
							$1 == res {print int($3)};
							END {print res, int(current)}'
			))
			res=${state[-2]}
			current=${state[-1]}
			unset state[-2] state[-1]
			declare -p state

			mode=$2
			if [[ -z $mode ]]; then
				declare -i i=${#state[@]}
				while ((state[i--] != current)); do :; done
				mode=${state[i]}
			elif [[ ${state[*]} != *$mode* ]]; then # default if mode is invalid
				mode=60
			fi

			swaymsg "output eDP-1 mode ${res}@${mode}Hz"
			notify-send "Hz" "$mode" -t 1000 -u low \
				-h int:value:$((100 * mode / state[0])) -h string:synchronous:hz
			;;
		closed) swaymsg 'output $d1 power off' ;;
		open) swaymsg 'output $d1 power on' ;;
		idle) swaymsg 'output * power off' ;;
		resume) swaymsg 'output * power on' ;;
		toggle)
			if [[ -f $NO_SLEEP ]]; then
				rm "$NO_SLEEP"
				notify-send LidSleep -t 1000 -u low
			else
				touch "$NO_SLEEP"
				notify-send NoLidSleep -t 1000 -u critical
			fi
			;;
	esac
}

main "$@" &>/dev/null
