#!/usr/bin/bash

. sss

SSS_OPTS[about]='MOM - Media Operation/Manipulation
A collection of media operation/manipulation scripts.'

((SCRIPT_OPTS[jobs] = (1 + $(nproc --all)) / 2))
SCRIPT_OPTS[freePathNumberReuse]=0
SCRIPT_OPTS[ffmpegSetLogLevel]=2
defineParams=(
	jobs 'j?' '[0-9]*' "Number of jobs to run in parallel (default=${SCRIPT_OPTS['jobs']})"
	freePathNumberReuse 'N?' '' 'Increment numbers in paths without appending (default=0)'
	ffmpegSetLogLevel 'f?' '-?[0-9]*' "Change ffmpeg log level to current script value\
 (<0 for setting a specific level)"
	"${defineParams[@]}")
SSS_OPTS[onNoArg]=1

ffmpegCmd() {
	local cmd=(ffmpeg -hide_banner -v)
	((SCRIPT_OPTS['ffmpegSetLogLevel'] > 0)) &&
		echo "${cmd[@]}" ${LOG_NAMES[${SCRIPT_OPTS['logLvl']}]/warn/warning} ||
		echo "${cmd[@]}" ${LOG_NAMES[$((-SCRIPT_OPTS['ffmpegSetLogLevel']))]/warn/warning}
}

actionInfo download 'download audio/video from given url with `yt-dlp`'
downloadParams=(
	metadata 'm?' '' 'Keep metadata' # NOTE: pipeline candidate - output as nometa src
	format 'f?' '.+' 'Yt-dl download format (default=ba[ext=webm])'
	src '$+' 'http.+' 'Urls to download'
	dst '$*' '$d$F\.(opus|m4a)' 'Output in yt-dlp format or dir (default=./%(creator)s - %(title)s.opus)')
download() { # TODO: allow video; allow qual/fmt selection through a picker
	[[ $dst && ! -d $dst ]] && local ext=${dst/*./} || local ext=opus
	local cmd=(yt-dlp -q -N 8 -f "${format:-ba[ext=${ext/opus/webm}]/ba}")
	[[ $dst ]] || local dst=.
	[[ -d $dst ]] && local tmp="%(creator)s - %(title)s" || local tmp=${dst##*/}
	local prefix=/tmp/mom-download
	declare -i i=-1 srcN=${#src[@]}

	while ((++i < srcN)); do
		src=${src[i]%%&*}
		function isolated() {
			local prefix=$prefix-${src#*=}-
			local cmd=("${cmd[@]}" "$src" -o "$prefix$tmp") dst=${dst[i]:-$dst}
			((SCRIPT_OPTS['logLvl'] < 3)) && cmd+=(-q)
			exec "${cmd[@]}" && {
				cmd=("$prefix"*)
				ffprobe "$cmd" |& grep 'Audio: aac' -q && local ext=m4a || local ext=opus
				exec mv "$cmd" "$cmd.$ext"

				((metadata > 0)) && cmd=(mv) || cmd=(call noMeta +k)
				cmd+=("$prefix"*)
				[[ -d $dst ]] && cmd+=("${dst%/}/$(
					sed -e 's/\(.* -\) \1/\1/' -e 's/^NA - //' -e 's/ [([].*[])]//g' \
						-e 's/\(.*\) by \(.*\)\(\.\w\+\)$/\2 - \1\3/' <<<"${cmd[${#cmd[@]} - 1]#$prefix}"
				)") || cmd+=("${dst%.*}.$ext")

				exec "${cmd[@]}"
			}
		}
		ACTION+="['$src']" isolated
	done
}

actionInfo noMeta M 'no-[M]eta' 'remove metadata from audio files'
noMetaParams=(
	keep 'k?' '' 'Keep original (default=remove $src)'
	src '$!' '$d$^audio' 'Audio file/dir to strip metadata from'
	dst '$?' '$d$F\.(flac|wma|m4a|mp3|opus)' 'Put results into (default=replace $src)')
noMeta() {
	if [[ -d $src ]]; then
		local CWD=$PWD
		cd "$src"
		for src in *; do
			reg=${noMetaParams[6]} argMatch "$src" || continue
			local src=$src
			noMeta
		done
		cd "$CWD"
	else
		[[ ${dst:-$src} == "$src" ]] && local dst=/tmp replaceSrc=$((1 - keep))

		[[ -d $dst ]] && local dst=$(ACTION+=.dst getFreePath "${dst%/}/${src##*/}")
		local cmd=($(ffmpegCmd) -i "$src" -map_metadata -1 -map a -c copy "$dst")
		exec "${cmd[@]}" && if ((replaceSrc > 0)); then
			exec mv "$dst" "$src"
		else
			((keep > 0)) || exec rm "$src"
		fi
	fi
}

pickTime() {
	if [[ ! -f $src ]]; then
		log Error ".$1 <pickTime>: \$src file must be set before picking a time"
		return 1
	fi

	local name=pickTime pick
	local pickFile="/tmp/$name.pick" pickerFile="/tmp/$name.lua"
	cat >>"$pickerFile" <<lua
		require 'mp'

		local function divmod(a, b)
			return a / b, a % b
		end

		local function pickTime()
			local m, remainder = divmod(mp.get_property_number 'time-pos', 60)
			local h, m = divmod(m, 60)
			local s = math.floor(remainder)
			local ms = math.floor((remainder - s) * 1000)
			local time = string.format('%02d:%02d:%02d.%03d', h, m, s, ms)
			local f = io.open('/tmp/pickTime.pick', 'w')
			f:write(time)
			f:close()
			mp.commandv 'quit'
		end

		mp.add_key_binding("Enter", "pickTime", pickTime)
lua

	declare -n arr=$1
	local _opts=(--msg-level=cplayer=error --no-audio-display --loop-playlist --display-tags-clr
		--term-playing-msg="$(print "<Enter> to pick --$1") time for $(
			((SCRIPT_OPTS['color'] > 0)) && ansi italic "'\${media-title}'" reset || echo '${media-title}'
		)" --script="$pickerFile")
	local msg=
	for src in "${src[@]:${#arr[@]}}"; do
		echo >"$pickFile"
		mpv "${_opts[@]}" "$src" || return 1
		read -r pick <"$pickFile"
		arr+=("${pick:-0}")
	done
	declare +n arr

	rm "$pickerFile" "$pickFile"
}
timeToSeconds() {
	local str=${1#0}
	declare -i s=0
	while [[ $str == *:* ]]; do
		((s = s * 60 + ${str/:*/}))
		str=${str#*:}
		str=${str#0}
	done
	((s = s * 60 + ${str%.*}))
	if [[ $str == *.* ]]; then
		echo "$s.${str#*.}"
	else
		echo $s
	fi
}
secondsToTime() {
	[[ $1 == *.* ]] && local str=.${1#*.} || local str
	declare -i s=${1%.*}
	str=$((s % 60))$str
	while ((0 < (s = s / 60))); do
		str=$((s % 60)):$str
	done
	echo "$str"
}

# $src, $2= name of the param for which we are creating the path
#######################################
# Globals:
#   keepOriginal if the original will not be replaced by this path
#   src source filename (if dst should move into it, log path as verbose only)
# Arguments:
#   filename base path name to get a free name for
#######################################
getFreePath() {
	if [[ ! -e $1 ]]; then
		echo "$1"
		return
	fi
	local filename=$1 text=$1
	[[ $filename =~ (0*([1-9][0-9]*)?)(\.[^.]+)$ ]]
	local ext=${BASH_REMATCH[3]} numLen=${#BASH_REMATCH[1]}
	if ((${SCRIPT_OPTS['freePathNumberReuse']} > 0 && numLen)); then # num reuse allowed and possible
		local prefix=${filename::-${#BASH_REMATCH[0]}}
		declare -i i=${BASH_REMATCH[2]}

		while [[ -e $text ]]; do
			text=$(printf '%s%0*d%s' "$prefix" $numLen $((++i)) "$ext")
		done
	else
		local prefix=${filename::-${#ext}}_
		declare -i i=0
		while [[ -e $text ]]; do
			text="$prefix$((++i))$ext"
		done
	fi

	[[ $src =~ ^"${prefix%_}"(_0*([1-9][0-9]*)?)?"$ext"$ &&
		$keepOriginal -lt 1 && ${BASH_REMATCH[2]} -le $i ]] || log Warn " = '$text'"
	echo "$text"
}

# expects $dst, $src
genDstFromSrc() {
	local out=${dst:-$src}
	[[ -d $dst ]] && out="${dst%/}/${src##*/}"
	# default path included to not override source file, but override if file dst was given
	[[ -d ${dst:-.} ]] && out=$(ACTION+=.dst getFreePath "$out")
	echo "$out"
}

runJob() {
	if ((SCRIPT_OPTS['jobs'] > $(jobs | wc -l))); then
		"$@" &
	else
		"$@"
	fi
}

# expects $cmd, $keepOriginal, $dst, $1=src, $2=out
runCmdWithCleanup() {
	local src=$1 out=$2
	exec "${cmd[@]}" "$out" && if ((keepOriginal <= 0)); then
		[[ $src == $out ]] || exec rm "$src"
		if [[ -z $dst && $out != "${src%.*}".* ]]; then
			exec mv "$out" "${src%.*}.${out##*.}"
		fi
	fi
}

actionInfo edit 'cut, strip metadata and/or convert media; time picker works only after `src`'
declare -A editBuilder=([fadeout]=pickTime [start]=pickTime [end]=pickTime)
editParams=(
	copy 'c?' '' 'Copy, otherwise convert to opus (disables -bvf, default=false)'
	metadata 'm?' '' 'Keep metadata (default=false)'
	keepOriginal 'k?' '' 'Keep $src file (removes by default)'
	bitrate 'b*' '[0-9]+' 'Output bitrate in kbps (default=96 for <=192kbps, else 128)'
	volume 'v*' '[0-9]+(\.[0-9]+)?' 'Volume multiplier (default=1)'
	src '$+' '$^audio' 'File to cut/convert'
	start 's*' '[0-9]+(:[0-9]+)*(\.[0-9]+)?' 'Start time (default=0)'
	end 'e*' '[0-9]+(:[0-9]+)*(\.[0-9]+)?' 'End time, or seconds from the end (default=0)'
	fadeout 'f*' '[0-9]+(:[0-9]+)*(\.[0-9]+)?' 'Fadeout start time, or seconds from the end'
	fadeoutPadding 'p?' '[0-9]+(\.[0-9]+)?' 'Shorten fadeout to fit this much silence (default=3)'
	dst '$?' '$d$F\.opus' 'Output file/dir (default=`$src.opus`, deletes `$src`)')
edit() {
	if reg='$F\.opus' argMatch "$dst" && ((${#src[@]} > 1)); then
		log Error '- cannot specify multiple $src and a file $dst'
		return 1
	fi

	local out
	local baseCmd=($(ffmpegCmd) -i '' -map a)
	declare -i i=-1 srcN=${#src[@]} fP=${fadeoutPadding:-3} fileArgPos=${#baseCmd[@]}-3
	((metadata <= 0)) && baseCmd+=(-map_metadata -1)
	((copy > 0)) && local volume=() fadeout=() baseCmd+=(-c copy)

	while ((++i < srcN)); do
		src=${src[i]}
		function isolated() {
			local cmd=("${baseCmd[@]}")
			cmd[$fileArgPos]=$src

			((copy > 0)) || {
				local b=${bitrate[i]:-$bitrate}
				if [[ -z $b ]]; then
					local fileBitrate=$(ffprobe "$src" |& sed -n 's/.*bitrate: \([0-9]\+\) .*/\1/p')
					[[ ($src == *.opus && $fileBitrate -ge 128) ||
						$src =~ \.(flac|wav)$ || $fileBitrate > 192 ]] && b=128 || b=96
					log Info ".bitrate = $b"
				fi
				local cmd+=(-b:a ${b}k) cmdBrTo=${#cmd[@]}
			}

			local s=${start[i]:-0}
			[[ $s != 0 ]] && cmd+=(-ss $s)

			local e=${end[i]:-0} endSeconds
			local fade=${fadeout[i]:-${fadeout:-0}}
			if [[ $e != 0 || $fade != 0 ]]; then
				if [[ $e != *:* ]]; then
					endSeconds=$(bc <<<"$(timeToSeconds $(
						ffprobe "$src" |& sed -n 's/.*Duration: \([^,]*\),.*/\1/p'
					))-$e")
					e=$(secondsToTime $endSeconds)
				else
					endSeconds=$(timeToSeconds $e)
				fi
				cmd+=(-to $e)

				if [[ $fade != 0 ]]; then
					local fadeDuration
					if [[ $fade != *:* ]]; then
						fadeDuration=$(bc <<<"$fade-$fP")
						cmd+=(-af afade=out:st=$(bc <<<"$endSeconds-$fade"):d=$fadeDuration)
					else
						fade=$(timeToSeconds $fade)
						fadeDuration=$(bc <<<"$endSeconds-$fade-$fP")
						cmd+=(-af afade=out:st=$fade:d=$fadeDuration)
					fi

					if [[ $fadeDuration == .* ]]; then
						log Error ".fade interval < 1s"
						return 1
					fi
				fi
			fi

			local v=${volume[i]:-${volume:-1}}
			if [[ $v != 1 ]]; then
				if [[ $fadeDuration ]]; then
					cmd=("${cmd[@]::${#cmd[@]}-1}" "${cmd[@]:0-1},volume=$v")
				else
					cmd+=(-af volume=$v)
				fi
			fi

			[[ -d $dst ]] && out="$dst/${src##*/}" ||
				{ [[ $dst ]] && out=$dst || out=$src; }
			if [[ -d ${dst:-.} ]]; then
				if ((copy <= 0)); then # if codec is not being copied already, try to copy if possible
					if [[ $copy -eq 0 && $src == *.opus && $v == 1 && $fade == 0 ]]; then
						log Info '.copy = true (no reencoding required)'
						cmd=("${cmd[@]::cmdBrTo-2}" -c copy "${cmd[@]:cmdBrTo}")
					fi
					out=${out%.*}.opus
				fi
				out=$(ACTION+=.dst getFreePath "$out")
			fi
			runCmdWithCleanup "$src" "$out"
		}
		ACTION+="['${src/*\//…/}']" runJob isolated
	done
	wait
}

actionInfo subtitles 'convert mp4 with srt to mkv'
subtitlesParams=(
	keepSrc 'k?' '' 'Keep used files (default=false, true for mkv for potential subtitle fail)'
	clearSrcSubs 'c?' '' 'Purge original video subtitles - enable if added are not visible'
	updateDefault 'd?' '' 'Change default subs to the first ones added (default=true)'
	lang 'l*' '[a-z]+' 'Languages in order of provided subtitles (default={name}.srt|eng per sub)'
	# encoding '-e' "${REGEX[dashvar]}" 'wanted final encoding (requires `enca`; default=UTF-8)'
	subs '$*' '$f\.srt' 'Subtitles to add (default=*.srt)'
	vid '$?' '$^video' 'Source video file (default=first of `*.mp4`,`*.mkv`)'
	dst '$?' '$F\.mkv' 'Output file (default=`$vid.mkv`)')
# subtitle format from windows transcoding using `enca` package
subtitles() {
	if [[ -z $subs ]]; then
		local subs=(*.srt)
		if [[ $vid && ${#subs[@]} -gt 1 ]]; then
			local match=${vid@L}
			match=${match%.*}.srt
			subs=()
			for src in *.srt; do
				if [[ ${src@L} == "$match" ]]; then
					local subs=$src
					break
				fi
			done
		fi

		if [[ -z $subs ]]; then
			log Error " - no match for '$match'"
			return 1
		fi
	fi

	[[ $vid == *.mkv && ! -f $vid && -z $dst ]] && local dst=$vid && vid=
	if [[ -z $vid ]]; then
		local vid=(*.mp4)
		if [[ ${#vid[@]} -ne 1 ]]; then
			local match=${subs@L}
			match=${match%.*}.
			vid=()
			for src in *.mp4 *.mkv; do
				if [[ ${src@L} == "$match"* ]]; then
					local vid=$src
					break
				fi
			done
		fi

		if [[ -z $vid ]]; then
			log Error " - no match for '$match'"
			return 1
		fi
	fi

	# [[ $encoding ]] || local encoding=UTF-8
	local cmd=($(ffmpegCmd))

	local sub i len=${#subs[@]}
	for sub in "${subs[@]}"; do
		# if [[ $(file "$sub" -b) =~ ([^ ]+)\ text && ${BASH_REMATCH[1]} != $encoding ]]; then
		# enca "$sub" -x "$encoding"
		# fi
		cmd+=(-i "$sub")
	done
	cmd+=(-i "$vid" -map $len:a -map $len:v -c copy)
	((clearSrcSubs < 0)) && ffprobe "$vid" |& grep Subtitle &>/dev/null && cmd+=(-map $len:s)

	[[ $lang ]] || local lang=()
	for ((i = 0; i < len; i++)); do
		if [[ -z ${lang[i]} ]]; then
			sub=${subs[i]##*/}
			[[ $sub == [a-z][a-z][a-z].srt ]] && lang[i]=${sub%.srt} || lang[i]=eng
			log Info "['${subs[i]/*\//…/}'].lang = ${lang[i]}"
		fi
		cmd+=(-metadata:s:s:$i language=${lang[i]} -map $i)
	done

	((updateDefault >= 0)) && cmd+=(-disposition:s:0 default)
	if [[ -z $dst ]]; then
		local dst=${vid%.*}.mkv
		[[ -f $dst ]] && dst="${vid%.*} $lang-sub.mkv"
	fi
	local tmp="/tmp/mom-${dst##*/}"
	cmd+=("$tmp")

	[[ ${vid} == *.mkv ]] && local keepSrc=1
	exec "${cmd[@]}" && exec mv "$tmp" "$dst" && if ((keepSrc <= 0)); then
		exec rm "${subs[@]}" "$vid"
	fi
}

actionInfo play 'select and play a song/dir using mpv'
playParams=(
	NO_LOOP 'L?' '' 'Do not loop playlist'
	randomizer 'r?' '(a([0-9]*)s?|d([0-9]*)(:[0-9]+)?s?)?'
	'(default=true=mpv --shuffle); a<f>= <f> picks per artist/final dir;
       d<n>:<f>= <n> final dir picks, <f> picks per dir, *`s` for --shuffle after picks'
	src '$!' '$e' 'Play file/dir')
declare -A playBuilder=([src]=pickSong)
pickSong() {
	declare -n _choice=$1
	if ((SCRIPT_OPTS['guiPicker'] > 0)); then
		local cmd=(rofi -dmenu -i -p "$4" -theme-str 'window {width: 50%;}')
	else
		local cmd=(fzf --prompt "$4: ")
	fi
	_choice+=("$({
		find ~/Music/* -type d
		find ~/Music/Songs -type f
	} | "${cmd[@]}")")
}
play() {
	local playlistFile=/tmp/my/song
	local cmd=(mpv --no-audio-display --no-terminal --playlist="$playlistFile")
	((NO_LOOP > 0)) || cmd+=(--loop-playlist)
	exec pkill -f "${cmd[*]::2}"

	if [[ -f $src ]]; then
		exec echo "$src" \> "$playlistFile"
		cmd+=(--playlist-start=0)
		src=${src%/*}
	elif [[ -f $playlistFile ]]; then
		exec rm "$playlistFile"
	fi

	if [[ $randomizer == [da]* ]]; then
		local allDirs=() artistDirs=() d f
		readarray -t allDirs < <(fd '' -Lt d "$src")
		for d in "${allDirs[@]}"; do # filter out dirs with no files
			local contents=("$d"/*)
			for f in "${contents[@]}"; do
				if [[ -f $f ]]; then
					artistDirs+=("$d")
					break
				fi
			done
		done
		unset allDirs

		function pickFromDir() {
			if ((perDir >= $#)); then
				echo "$@" | exec sort -R \>\> "$playlistFile"
				return
			fi
			declare -i cnt=$perDir pick
			while ((cnt--)); do
				((pick = RANDOM % $#))
				if [[ $(file -b --mime-type "${!pick}") == audio/* ]]; then
					exec echo "${!pick}" \>\> "$playlistFile"
				else
					((cnt++))
				fi
			done
		}

		if ((!${#artistDirs[@]})); then
			exec echo "$src" \>\> "$playlistFile"
		elif [[ $randomizer == d* ]]; then
			[[ $randomizer =~ ^d([0-9]*)(:([0-9]+))?s?$ ]]
			declare -i fileCnt=${#artistDirs[@]} n=${BASH_REMATCH[1]:-1} perDir=${BASH_REMATCH[3]:-1}
			while ((n-- > 0)); do
				pickFromDir "${artistDirs[RANDOM % len]%/}"/*
			done
		else # randomizer == a*
			[[ $randomizer =~ ^a([0-9]*)s?$ ]]
			declare -i perDir=${BASH_REMATCH[1]:-1}
			for d in "${artistDirs[@]}"; do
				pickFromDir "${d%/}"/*
			done
		fi
		[[ $randomizer == *s ]] && cmd+=(--shuffle)
	else
		exec echo "$src" \>\> "$playlistFile"
		((randomizer >= 0)) && cmd+=(--shuffle)
	fi

	exec "${cmd[@]}" &
	sleep 1
	exec rm "$playlistFile"
}

actionInfo linkFix 'fix symlinked files - find new paths, allowing slightly modified names+ft'
linkFixParams=(
	dst 'd?' '$d' 'Dir with broken links (default=./)'
	resources '$!' '$d' 'Dir with reference files')
linkFix() {
	[[ $dst ]] && dst=${dst%/}/ || local dst=${dst:-./}
	local CWD=$PWD
	cd "$dst"
	local f
	while read f; do
		if [[ ! -f $f ]]; then
			local name=${f##*[-/]}
			local all="" found=
			while read found; do
				if ((${#all} && ${#all} < ${#found})); then
					log Warn ": unused match '$found' to '$f'"
				else
					all=$found
				fi
			done < <(fd -t f "${name%.*}" "$dir")
			if [[ $all ]]; then
				exec rm "$f"
				exec ln -s "$all" "${f%.*}.${all##*.}"
			else
				log Warn ": unmatched $f"
			fi
		fi
	done < <(fd -t l)
	cd "$CWD"
}

actionInfo resize 'resize images'
resizeParams=(
	keepOriginal 'k?' '' 'Keep $src file (removes by default)'
	src '$+' '$^image' 'File to resize'
	quality 'q?' '[0-9]+' 'Change image quality (default=original quality)'
	predicate 'p?' '[0-9]+%?[+-]' 'Source size requirement, pixels or % of the target size
       (comparing to dimension selected by --size)'
	size 's!' 'x?[0-9]+[x^%]?' 'Longest side, *`^`=shortest, `*x*`=width/height, `*%`'
	dst '$?' '$d$F\.(jpe?g|png)' 'Output file/dir (default=$src)')
resize() {
	if reg='$F\.opus' argMatch "$dst" && ((${#src[@]} > 1)); then
		log Error '- cannot specify multiple $src and a file $dst'
		return 1
	fi
	if [[ ! -d ${dst:-.} ]]; then
		local ext=${dst##*.} srcExt=${src[0]##*.}
		if [[ ${ext,,} != "${srcExt,,}" ]]; then
			log Warn ".\$dst: extension mismatch '$ext' != '$srcExt'"
		fi
	fi

	declare -i i=-1 srcN=${#src[@]}
	local only=${only:->}
	while ((++i < srcN)); do
		src=${src[i]}
		function isolated() {
			declare -ai dim=($(magick identify -auto-orient -format '%w %h' "$src"))
			# imagemagick would understand, but it's easier to reuse our shortest side checker
			local nS=$size
			[[ $size == x* ]] && size=${size:1} && ((dim[0] > dim[1])) && size+=^
			[[ $size == *x ]] && size=${size::-1} && ((dim[0] < dim[1])) && size+=^
			if [[ $size == *'%' ]]; then
				((dim[0] < dim[1])) && dim=(${dim[1]} ${dim[0]}) # scale by the longer side
				((size = dim * ${size::-1} / 100))
			fi
			[[ $nS != $size ]] && log Verbose ".size: $nS → $size"

			if [[ $predicate ]]; then
				((dim[0] < dim[1])) && dim=(${dim[1]} ${dim[0]})
				local gap=${predicate::-1} only=${predicate:0-1}
				if [[ $gap == *% ]]; then
					((gap = ${gap%\%} * ${size%^} / 100))
					log Verbose ".predicate: $predicate → $gap$only"
				fi
				# select compared dimension - `^` for shortest side
				[[ $size == *^ ]] && dim=${dim[1]}
				# require distance to target size greater/lower or equal to $gap
				if ! [[ ($only == + && $dim -ge $gap) || ($only == - && $dim -le $gap) ]]; then
					if [[ $dst ]]; then
						exec $( ((keepOriginal > 0)) && echo cp || echo mv) "$src" "$(genDstFromSrc)"
					fi
					log Info ": ${dim}px != <${gap}px${only}> → skipping"
					return
				fi
			fi

			local cmd=(magick "$src" -resize "$size")
			((quality)) && cmd+=(-quality $quality)

			runCmdWithCleanup "$src" "$(genDstFromSrc)"
		}
		ACTION+="['${src/*\//…/}']" runJob isolated
	done
	wait
}

actionInfo rename R 'rename video/image files'
renameParams=(
	videoFormat 'v!' '.+' 'Set `sed` expression for video (default=move year to the front)'
	audioFormat 'a!' '.+' 'Set `sed` expression for audio (default=strip track number)'
	imageFormat 'i!' '.+' 'Set timestamp format for images, without extension (default=%Y-%m-%d_%H%M%S)'
	dateFallback 'F?' '[yan]|yes|no|ask' 'Use file mod time for image timestamp fallback (default=a/ask)'
	src '$+' '$d$^(audio|video|image)' 'File to rename'
)
renameConfig=(
	videoFormat='s/\./ /g;s/^\(.*\) \([0-9]\{4\}\) .* \(...\)$/\2 \1.\3/'
	audioFormat='s/^.*- \?//'
	imageFormat='%Y-%m-%d_%H%M%S'
	dateFallback=ask
)
rename() {
	if [[ -d $src ]]; then
		for src in "$src"/*; do
			reg=${renameParams[2]} argMatch "$src" && rename
		done
	elif ((${#src[@]} > 1)); then
		for src in "${src[@]}"; do
			src=$src rename
		done
	else
		function isolated() {
			if reg="$^video" argMatch "$src"; then
				local dst=$(echo "$src" | sed "$videoFormat")
			elif reg="$^audio" argMatch "$src"; then
				local dst=$(echo "$src" | sed "$audioFormat")
			else
				local dst="$(exiftool "$src" -d "$imageFormat" \
					-p '$DateTimeOriginal' 2>/dev/null).${src##*.}"

				if [[ $dst == .* ]]; then # no name, just extension
					dst="$(date -r "$src" +"$imageFormat")$dst"
					[[ $dst == "$src" ]] && return

					if [[ $dateFallback == a* ]]; then
						local dateFallback
						read -p "$(print "rename '$src' to file mod date ('$dst')? [y/N]: ")" -n1 dateFallback
						[[ $dateFallback ]] && echo # fix missing newline after input
					else
						log Warn " - Missing DateTime exif data"
					fi

					if [[ $dateFallback != [yY]* ]]; then
						log Info " - skipping"
						return
					else
						log Info " - using file modification date"
					fi
				fi

				[[ $src == "${src%/*}" ]] || dst="${src%/*}/$dst"
			fi
			if [[ $src != "$dst" ]]; then
				dst=$(ACTION+=.dst getFreePath "$dst")
				if [[ $src != "$dst" ]]; then
					exec mv "$src" "$dst"
				fi
			fi
		}
		ACTION+="['${src/*\//…/}']" isolated
	fi
}

main "$@" # TODO: default action that determines the right action to give the argument(s) to
