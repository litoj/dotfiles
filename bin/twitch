#!/usr/bin/bash
export LC_ALL=C LANG=C

wtwitch() {
	# ORIGINAL SOURCE: https://github.com/krathalan/wtwitch
	# THIS VERSION IS STRIPPED DOWN FOR ONLY GETTING VOD INFO

	declare token
	declare -i expiry
	declare -Ai streamerIds
	local CACHE_FILE="${XDG_CACHE_HOME:-$HOME/.cache}/wtwitch.cache.sh"
	local T=("https://api.twitch.tv/helix" "https://id.twitch.tv/oauth2/token" "cotxsalhlctv8z572f7fant4b0sc3u" "gaofxvult280l3sbz8n6btvk5fdswp")

	[[ -f $CACHE_FILE ]] && source "$CACHE_FILE"

	if [[ -z $token || $token == null ]] ||
		(($(date +%s) >= expiry - 86400)); then
		newToken="$(curl --silent -d "client_id=${T[2]}&client_secret=${T[3]}&grant_type=client_credentials" "${T[1]}" | jq -r ".access_token")"
		[[ -z $newToken || $newToken == null ]] && exit 1
		token=$newToken
		expiry=$(date -d tomorrow +%s)
		declare -p token expiry streamerIds >"$CACHE_FILE"
	fi

	# Search for streamer ID in cache
	local ID=${streamerIds["$1"]}

	# If user login not cached, fetch from Twitch API
	if [[ -z $ID ]]; then
		ID=$(
			curl --silent -H "Client-ID: ${T[2]}" -H "Authorization: Bearer $token" \
				"${T[0]}/users?login=$1" | jq -r ".data[0].id"
		)
		[[ -z $ID || $ID == null ]] && exit 1

		streamerIds["$1"]=$ID
		declare -p token expiry streamerIds >"$CACHE_FILE"
	fi

	# Get list of VODs
	local JSON=$(
		curl --silent -H "Client-ID: ${T[2]}" -H "Authorization: Bearer $token" \
			"${T[0]}/videos?user_id=$ID"
	)
	declare -i i=0
	while true; do
		mapfile -t vodData < <(jq -r ".data[$i] | .title, .created_at, .duration, .url" <<<"$JSON")
		[[ ${vodData} != null ]] && ((i < 20)) || break
		printf "%d %s\t%s  \t%s %s\n" $((i += 1)) "$(date -d "${vodData[1]}" "+%d.%m.")" "${vodData[2]%m*}" "$(echo ${vodData[0]} | sed 's/ *[!|].*$//')" "${vodData[3]}"
	done
}

CONFIG_FILE="${XDG_CONFIG_HOME:-$HOME/.config}/twitch.conf.sh"
declare -a streamers
[[ -f $CONFIG_FILE ]] && source "$CONFIG_FILE"

if [[ $1 == https://* ]]; then
	url=$1
else
	streamer=$(printf '%s\n' ${streamers[@]} | rofi -dmenu -p Streamer)
	(($?)) && exit 0
	case "$streamer" in
		[0-9]) streamer=${streamers[$streamer]} ;;
		https://*) url=$streamer ;;
		[a-z]*)
			add=1
			for s in ${streamers[@]}; do
				if [[ $s == "$streamer"* ]]; then
					streamer=$s
					unset add
					break
				fi
			done
			[[ $streamer == [a-z] ]] && exit 1
			;;
	esac

	if [[ -z $url ]]; then
		streams=$(wtwitch $streamer)
		urls=($(echo "$streams" | sed 's/^.*https:/https:/'))
		streams=$(echo "$streams" | sed 's/https:.*//')
		video=$(echo "$streams" | rofi -dmenu -p Video -i)

		if [[ -z $video ]]; then
			live=true
			url="https://twitch.tv/$streamer"
		elif [[ $video != [1-9] ]]; then
			url=${urls[$(($(echo "$video" | sed 's/ .*//') - 1))]}
		fi

		[[ -z $url ]] && exit 1
	fi
fi

if [[ -z $quality ]]; then
	qualOpts=(360 720 1440 best audio)
	[[ $live ]] && qualOpts[0]=480
	declare -A presets=([best]="bv*+ba" [360]="bv*[height=360],ba" [audio]="ba")
	quality=$(printf '%s\n' ${qualOpts[@]} | rofi -dmenu -p Quality)
	(($?)) && exit 0

	[[ $quality == [0-9]* || ${presets[$quality]} ]] &&
		quality=${presets[$quality]:-bv*[height=$quality]+ba}

	if [[ $url == *youtube.com/w* && $quality =~ ^(.*)(.ba)$ ]]; then
		quality="${BASH_REMATCH[1]}${BASH_REMATCH[2]}" # add [ext=webm] for avoiding av1
	fi
fi

mpv --ytdl-format="$quality" --no-terminal "$url" &
params="[pid=$!]"' floating enable, sticky enable, border pixel $border, resize set 648 368, focus'
declare -i max=10 i=0
while ! swaymsg "$params" &>/dev/null && ((++i < max)); do
	sleep $i
done

if ((i < max)); then
	swaymsg 'exec $floatpos r snap && $floatpos d snap && swaymsg focus tiling'

	[[ $streamers == $streamer || $streamer == http* ]] && exit 0

	i=1
	len=${#streamers[@]}
	while [[ ${streamers[$i]} != $streamer ]] && ((++i < len)); do
		:
	done

	# set the watched streamer to the front
	streamers=($streamer ${streamers[@]:0:i} ${streamers[@]:i+1})
	echo "streamers=(${streamers[*]})" >"$CONFIG_FILE"
else
	pkill -P $$
fi
